#!/usr/bin/python

# Copyright 2015 SUSE LLC, Robert Schweikert
#
# This file is part of ec2uploadimg.
#
# ec2uploadimg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ec2uploadimg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ec2uploadimg. If not, see <http://www.gnu.org/licenses/>.

import ConfigParser
import argparse
import boto
import boto.ec2
import os
import sys

import ec2utils.ec2utilsutils as utils
import ec2utils.ec2uploadimg as ec2upimg
from ec2utils.ec2UtilsExceptions import *

# Check the boto API version before doing anything
apiVersion = boto.__version__
major, minor, release = apiVersion.split('.')
if int(major) < 2 or int(minor) < 22:
    print 'Need to use boto version 2.22.0 or higher. Installed version: ',
    print apiVer
    sys.exit(1)

# Set up command line argument parsing
argparse = argparse.ArgumentParser(description='Upload image to Amazon EC2')
argparse.add_argument(
    '-a', '--account',
    dest='accountName',
    help='Account to use (Optional)',
    metavar='ACCOUNT_NAME'
)
argparse.add_argument(
    '--access-id',
    dest='accessKey',
    help='AWS access key (Optional)',
    metavar='AWS_ACCESS_KEY'
)
argparse.add_argument(
    '-B', '--backing-store',
    default='ssd',
    dest='backingStore',
    help='The backing store type, (mag|ssd) (Optional)',
    metavar='EC2_BACKING_STORE'
)
argparse.add_argument(
    '--boot-kernel',
    dest='akiID',
    help='AWS kernel ID (aki) to boot the new image (Optional)',
    metavar='AWS_AKI_ID'
)
argparse.add_argument(
    '-d', '--description',
    dest='descript',
    help='Image description, will also be used for the snapshot',
    metavar='IMAGE_DESCRIPTION',
    required=True
)
argparse.add_argument(
    '-e', '--ec2-ami',
    dest='amiID',
    help='AWS AMI id for the image to use to upload (Optional)',
    metavar='AWS_AMI_ID',
)
argparse.add_argument(
    '-f', '--file',
    default=os.path.expanduser('~') + os.sep + '.ec2utils.conf',
    dest='configFilePath',
    help='Path to configuration file, default ~/.ec2utils.conf (Optional)',
    metavar='CONFIG_FILE'
)
argparse.add_argument(
    '--grub2',
    action='store_true',
    default=False,
    dest='grub2',
)
argparse.add_argument(
    '-m', '--machine',
    dest='arch',
    help='Machine architecture i386|x86_64 for the uploaded image',
    metavar='ARCH',
    required=True
)
argparse.add_argument(
    '-n', '--name',
    dest='imgName',
    help='Image name',
    metavar='IMAGE_NAME',
    required=True
)
argparse.add_argument(
    '-p', '--private-key-file',
    dest='privateKey',
    help='Private SSH key file (Optional)',
    metavar='PRIVATE_KEY'
)
argparse.add_argument(
    '-r', '--regions',
    dest='regions',
    help='Comma separated list of regions to upload to (Required)',
    metavar='EC2_REGIONS',
    required=True
)
argparse.add_argument(
    '--root-volume-size',
    dest='rootVolSize',
    help='Size of root volume for new image (Optional)',
    metavar='ROOT_VOLUME_SIZE',
)
argparse.add_argument(
    '--ssh-key-pair',
    dest='sshName',
    help='AWS SSH key pair name (Optional)',
    metavar='AWS_KEY_PAIR_NAME'
)
argparse.add_argument(
    '-s', '--secret-key',
    dest='secretKey',
    help='AWS secret access key (Optional)',
    metavar='AWS_SECRET_KEY'
)
argparse.add_argument(
    '--snaponly',
    action='store_true',
    default=False,
    dest='snapOnly'
)
argparse.add_argument(
    '--sriov-support',
    action='store_true',
    default=False,
    dest='sriov'
)
argparse.add_argument(
    'source',
    help='The path to the image source file'
)
argparse.add_argument(
    '-T', '--timeout',
    default=300,
    dest='timeout',
    help='Timeout value to wait for AWS operations, default 300 s (Optional)',
    metavar='WAIT_TIME'
)
argparse.add_argument(
    '-t', '--type',
    dest='instType',
    help='Instance type to use to upload image (Optional)',
    metavar='AWS_UPLOAD_INST_TYPE'
)
argparse.add_argument(
    '-u', '--user',
    dest='sshUser',
    help='The user for the ssh connection to the instance (Optional)',
    metavar='AWS_INSTANCE_USER'
)
argparse.add_argument(
    '--use-root-swap',
    action='store_true',
    default=False,
    dest='rootSwapMethod',
    help='Use the root swap method to create the new image'
)
argparse.add_argument(
    '-V', '--virt-type',
    default='para',
    dest='virtType',
    help='The virtualization type, (para)virtual or (hvm)',
    metavar='AWS_VIRT_TYPE'
)
argparse.add_argument(
    '--verbose',
    action='store_true',
    default=False,
    dest='verbose',
    help='Enable verbose output'
)
argparse.add_argument(
    '--version',
    action='store_true',
    default=False,
    dest='version',
    help='Program version'
)



if '--version' in sys.argv:
    import ec2utils
    version_file_name = 'upload_VERSION'
    base_path = os.path.dirname(ec2utils.__file__)
    version = open(base_path + os.sep + version_file_name, 'r').read()
    print version
    sys.exit(0)
    
args = argparse.parse_args()    
config_file = args.configFilePath
config = None
if not os.path.isfile(config_file):
    print 'Configuration file "%s" not found.' % config_file
    sys.exit(1)
try:
    config = utils.get_config(config_file)
except Exception as e:
    print >> sys.stderr, e.message
    sys.exit(1)

if not os.path.isfile(args.source):
    print 'Could not find specified image file: %s' % args.source
    sys.exit(1)

access_key = args.accessKey
if not access_key:
    access_key = utils.get_from_config(args.accountName,
                                       config,
                                       None,
                                       'access_key_id')
if not access_key:
    print >> sys.stderr, 'Could not determine account access key'
    sys.exit(1)

secret_key = args.secretKey
if not secret_key:
    secret_key = utils.get_from_config(args.accountName,
                                       config,
                                       None,
                                       'secret_access_key')
if not secret_key:
    print >> sys.stderr, 'Could not determine account secret access key'
    sys.exit(1)

sriov_type = args.sriov
if sriov_type:
    sriov_type = 'simple'

virtualization_type = args.virtType
if virtualization_type == 'para':
    virtualization_type = 'paravirtual'

if sriov_type and virtualization_type != 'hvm':
    print >> sys.stderr, 'SRIOV support is only possible with HVM images'
    sys.exit(1)

root_volume_size = 10
if args.rootVolSize:
    root_volume_size = args.rootVolSize
    
try:
    for region in args.regions.split(','):
        ami_id = args.amiID
        if not ami_id:
            ami_id = utils.get_from_config(args.accountName,
                                           config,
                                           region,
                                           'ami')
        bootkernel = args.akiID
        if args.virtType == 'hvm':
            bootkernel = None

        if not bootkernel and args.virtType != 'hvm':
            if args.grub2:
                bootkernel = utils.get_from_config(args.accountName,
                                                   config,
                                                   region,
                                                   'g2_aki_x86_64')
            elif args.arch == 'x86_64':
                bootkernel = utils.get_from_config(args.accountName,
                                                   config,
                                                   region,
                                                   'aki_x86_64')
            elif args.arch == 'i386':
                bootkernel = utils.get_from_config(args.accountName,
                                                   config,
                                                   region,
                                                   'aki_i386')
            else:
                print >> sys.stderr, 'Could not reliable determine the ',
                print >> sys.stderr, 'bootkernel to use '
                print >> sys.stderr, 'must specify bootkernel, ',
                print >> sys.stderr, 'arch (x86_64|i386) or hvm'
                sys.exit(1)

        inst_type = args.instType
        if not inst_type:
            inst_type = utils.get_from_config(args.accountName,
                                              config,
                                              region,
                                              'instance_type')

        key_pair_name = args.sshName
        if not key_pair_name:
            key_pair_name = utils.get_from_config(args.accountName,
                                                  config,
                                                  region,
                                                  'ssh_key_name')
        if not key_pair_name:
            print >> sys.stderr, 'Could not determine key pair name'
            sys.exit(1)

        ssh_private_key_file = args.privateKey
        if not ssh_private_key_file:
            ssh_private_key_file = utils.get_from_config(args.accountName,
                                                         config,
                                                         region,
                                                         'ssh_private_key')
        if not ssh_private_key_file:
            print >> sys.stderr, 'Could not determine the private ssh key file'
            sys.exit(1)
        if not os.path.exists(ssh_private_key_file):
            print >> sys.stderr, ('SSH private key file "%s" does not exist'
                                  % ssh_private_key_file)

        ssh_user = args.sshUser
        if not ssh_user:
            ssh_user = utils.get_from_config(args.accountName,
                                             config,
                                             region,
                                             'user')
        if not ssh_user:
            print >> sys.stderr, 'Could not determin ssh user to use'
            sys.exit(1)

        uploader = ec2upimg.EC2ImageUploader(
                          access_key=access_key,
                          backing_store=args.backingStore,
                          bootkernel=bootkernel,
                          image_arch=args.arch,
                          image_description=args.descript,
                          image_name=args.imgName,
                          image_virt_type=virtualization_type,
                          inst_user_name=ssh_user,
                          launch_ami=ami_id,
                          launch_inst_type=inst_type,
                          operation_timeout=args.timeout,
                          root_volume_size=root_volume_size,
                          secret_key=secret_key,
                          sriov_type=sriov_type,
                          ssh_key_pair_name=key_pair_name,
                          ssh_key_private_key_file=ssh_private_key_file,
                          use_grub2=args.grub2,
                          verbose=args.verbose)

        uploader.set_region(region)
        if args.snapOnly:
            snapshot = uploader.create_snapshot(args.source)
            print 'Created snapshot: ', snapshot.id
        elif args.rootSwapMethod:
            ami = uploader.create_image_use_root_swap(args.source)
            print 'Created image: ', ami
        else:
            ami = uploader.create_image(args.source)
            print 'Created image: ', ami
except EC2UploadImgException, e:
    print >> sys.stderr, e
    sys.exit(1)
except Exception, e:
    print >> sys.stderr, e
    sys.exit(1)
