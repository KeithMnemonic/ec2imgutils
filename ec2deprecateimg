#!/usr/bin/python

# Copyright 2015 SUSE LLC, Robert Schweikert
#
# This file is part of ec2deprecateimg.
# ec2deprecateimg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# ec2deprecateimg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ec2deprecateimg. If not, see <http://www.gnu.org/licenses/>.

import boto
import boto.ec2
import argparse
import os
import sys

#import ec2deprecateimg.ec2deprecateimg

# Set up command line argument parsing
argparse = argparse.ArgumentParser(description='Deprecate images in EC2')
argparse.add_argument(
    '-a', '--account',
    dest='accountName',
    help='Account to use',
    metavar='ACCOUNT_NAME',
    required=True
)
hlpMsg = 'The deprecation period, image will be tagged for removal '
hlpMsg += 'on "now + deprecation perion", specified in months, default '
hlpMsg += ' is 6 month (Optional)'
argparse.add_argument(
    '-d', '--deprecation-period',
    default=6,
    dest='depTime',
    help=hlpMsg,
    metavar='NUMBER_OF_MONTHS',
    type=int
)
hlpMsg = 'Do not perform any action, print information about actions that '
hlpMsg += 'would be performed instared (Optional)'
argparse.add_argument(
    '-n', '--dry-run',
    dest='dryRun',
    help=hlpMsg,
    action='store_false'
)
argparse.add_argument(
    '-f', '--file',
    dest='confFile',
    help='Path to configuration file, default ~/.ec2utils.conf (Optional)',
    metavar='CONFIG_FILE'
)
argparse.add_argument(
    '--image-id',
    dest='depImgID',
    help='The AMI ID of the image to be deprecated (Optional)',
    metavar='AMI_ID'
)
depImgIdentifier = argparse.add_mutually_exclusive_group()
depImgIdentifier.add_argument(
    '--image-name',
    dest='depImgName',
    help='The image name of the image to be deprecated (Optional)',
    metavar='IMAGE_NAME'
)
hlpMsg = 'An image name fragment to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
depImgIdentifier.add_argument(
    '--image-name-frag',
    dest='depImgNameFrag',
    help=hlpMsg,
    metavar='IMAGE_NAME_FRAGMENT'
)
hlpMsg = 'A regular expression to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
depImgIdentifier.add_argument(
    '--image-name-match',
    dest='depImgNameMatch',
    help=hlpMsg,
    metavar='REGEX'
)
argparse.add_argument(
    '--image-virt-type',
    choices=['hvm','para'],
    dest='virtType',
    help='The virtualization type of the image to be deprecated (Optional)',
    metavar='VIRT_TYPE'
)
replImgIdentifier = argparse.add_mutually_exclusive_group(required=True)
hlpMsg = 'The AMI ID of the image used as a replacement for the image(s) '
hlpMsg += 'being deprecated (Optional), one of --replacement-id or '
hlpMsg += '--replacement-name is required'
replImgIdentifier.add_argument(
    '--replacement-id',
    dest='replID',
    help=hlpMsg,
    metavar='AMI_ID'
)
hlpMsg = 'The name of the image used as a replacement for the image(s) '
hlpMsg += 'being deprecated (Optional), one of --replacement-id or '
hlpMsg += '--replacement-name is required'
replImgIdentifier.add_argument(
    '--replacement-name',
    dest='replName',
    help=hlpMsg,
    metavar='IMAGE_NAME'
)
hlpMsg = 'Comma separated list of regions for publishing, all integrated '
hlpMsg += 'region sif not given (Optional)'
argparse.add_argument(
    '-r', '--regions',
    dest='regions',
    help=hlpMsg,
    metavar='EC2_REGIONS'
)
argparse.add_argument(
    '--version',
    dest='version',
    help='Program version'
)

args = argparse.parse_args()


regions = None
if args.regions:
    regions = args.regions.split()
else:
    regions = []
    regs = boto.ec2.regions()
    for reg in regs:
        if reg.name in ['us-gov-west-1', 'cn-north-1']:
            continue
        regions.append(reg.name)

configFile = args.confFile
if not configFile:
    configFile = os.path.expanduser('~') + os.sep + '.ec2utils.conf'

if not os.path.isfile(configFile):
    print 'Configuration file "%s" not found.' %configFile
    sys.exit(1)


