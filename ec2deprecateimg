#!/usr/bin/python

# Copyright 2015 SUSE LLC, Robert Schweikert
#
# This file is part of ec2deprecateimg.
#
# ec2deprecateimg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# ec2deprecateimg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ec2deprecateimg. If not, see <http://www.gnu.org/licenses/>.

import boto
import boto.ec2
import argparse
import os
import sys

import ec2utils.ec2deprecateimg as ec2depimg
from ec2utils.ec2DepImgExceptions import *


# Set up command line argument parsing
argparse = argparse.ArgumentParser(description='Deprecate images in EC2')
argparse.add_argument(
    '-a', '--account',
    dest='accountName',
    help='Account to use',
    metavar='ACCOUNT_NAME',
    required=True
)
hlpMsg = 'The deprecation period, image will be tagged for removal '
hlpMsg += 'on "now + deprecation perion", specified in months, default '
hlpMsg += ' is 6 month (Optional)'
argparse.add_argument(
    '-d', '--deprecation-period',
    default=6,
    dest='depTime',
    help=hlpMsg,
    metavar='NUMBER_OF_MONTHS',
    type=int
)
hlpMsg = 'Do not perform any action, print information about actions that '
hlpMsg += 'would be performed instared (Optional)'
argparse.add_argument(
    '-n', '--dry-run',
    action='store_true',
    default=False,
    dest='dryRun',
    help=hlpMsg
)
argparse.add_argument(
    '-f', '--file',
    default = os.path.expanduser('~') + os.sep + '.ec2utils.conf',
    dest='configFilePath',
    help='Path to configuration file, default ~/.ec2utils.conf (Optional)',
    metavar='CONFIG_FILE'
)
depImgIdentifier = argparse.add_mutually_exclusive_group(required=True)
depImgIdentifier.add_argument(
    '--image-id',
    dest='depImgID',
    help='The AMI ID of the image to be deprecated (Optional)',
    metavar='AMI_ID'
)
depImgIdentifier.add_argument(
    '--image-name',
    dest='depImgName',
    help='The image name of the image to be deprecated (Optional)',
    metavar='IMAGE_NAME'
)
hlpMsg = 'An image name fragment to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
depImgIdentifier.add_argument(
    '--image-name-frag',
    dest='depImgNameFrag',
    help=hlpMsg,
    metavar='IMAGE_NAME_FRAGMENT'
)
hlpMsg = 'A regular expression to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
depImgIdentifier.add_argument(
    '--image-name-match',
    dest='depImgNameMatch',
    help=hlpMsg,
    metavar='REGEX'
)
argparse.add_argument(
    '--image-virt-type',
    choices=['hvm','para'],
    dest='virtType',
    help='The virtualization type of the image to be deprecated (Optional)',
    metavar='VIRT_TYPE'
)
argparse.add_argument(
    '--public-only',
    action='store_true',
    default=False,
    dest='publicOnly',
    help='Only consider images that are public (Optional)'
)
replImgIdentifier = argparse.add_mutually_exclusive_group(required=True)
hlpMsg = 'The AMI ID of the image used as a replacement for the image(s) '
hlpMsg += 'being deprecated (Optional), one of --replacement-id or '
hlpMsg += '--replacement-name is required'
replImgIdentifier.add_argument(
    '--replacement-id',
    dest='replImgID',
    help=hlpMsg,
    metavar='AMI_ID'
)
hlpMsg = 'The name of the image used as a replacement for the image(s) '
hlpMsg += 'being deprecated (Optional), one of --replacement-id or '
hlpMsg += '--replacement-name is required'
replImgIdentifier.add_argument(
    '--replacement-name',
    dest='replImgName',
    help=hlpMsg,
    metavar='IMAGE_NAME'
)
hlpMsg = 'An image name fragment to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
replImgIdentifier.add_argument(
    '--replacement-name-frag',
    dest='replImgNameFrag',
    help=hlpMsg,
    metavar='IMAGE_NAME_FRAGMENT'
)
hlpMsg = 'A regular expression to match the image name of the image to be '
hlpMsg += 'deprecated (Optional)'
replImgIdentifier.add_argument(
    '--replacement-name-match',
    dest='replImgNameMatch',
    help=hlpMsg,
    metavar='REGEX'
)
hlpMsg = 'Comma separated list of regions for publishing, all integrated '
hlpMsg += 'region sif not given (Optional)'
argparse.add_argument(
    '-r', '--regions',
    dest='regions',
    help=hlpMsg,
    metavar='EC2_REGIONS'
)
argparse.add_argument(
    '--verbose',
    dest='verbose',
    help='Enable on verbose output'
)
argparse.add_argument(
    '--version',
    dest='version',
    help='Program version'
)

args = argparse.parse_args()

regions = None
if args.regions:
    regions = args.regions.split()
else:
    regions = []
    regs = boto.ec2.regions()
    for reg in regs:
        if reg.name in ['us-gov-west-1', 'cn-north-1']:
            if args.verbose:
                print 'Not processing disconnected region: %s' %reg.name
            continue
        regions.append(reg.name)

configFile = args.configFilePath
if not os.path.isfile(configFile):
    print 'Configuration file "%s" not found.' %configFile
    sys.exit(1)

try:
    imgDeprecator = ec2depimg.EC2DeprecateImg(
                                account=args.accountName,
                                depPeriod=args.depTime,
                                config=args.configFilePath,
                                depImgID=args.depImgID,
                                depImgName=args.depImgName,
                                depImgNameFrag=args.depImgNameFrag,
                                depImgNameMatch=args.depImgNameMatch,
                                publicOnly=args.publicOnly,
                                replImgID=args.replImgID,
                                replImgName=args.replImgName,
                                replImgNameFrag=args.replImgNameFrag,
                                replImgNameMatch=args.replImgNameMatch,
                                verbose=args.verbose,
                                virtType=args.virtType)

    for region in regions:
        imgDeprecator.setRegion(region)
        if args.dryRun:
            imgDeprecator.printDeprecationInfo()
        else:
            imgDeprecator.deprecate()
except EC2DeprecateImgException, e:
    print >> sys.stderr, e
    sys.exit(1)
